{"version":3,"sources":["BlackjackDeck.js","main.js"],"names":["apiUrl","deckId","cardsRemaining","lastDrawnCard","shuffle","fetch","then","response","json","data","deck_id","remaining","console","log","catch","err","drawCard","drawNo","cards","code","BlackjackDeckES6Class","deck","status","Promise","resolve","reject","Error","statusText"],"mappings":"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","file":"main.33e1f41e.map","sourceRoot":"..","sourcesContent":["export default function(apiUrl) {\r\n  this.deckId = 'new';\r\n  this.cardsRemaining = null;\r\n  this.lastDrawnCard = null;\r\n  this.apiUrl = apiUrl\r\n\r\n  this.shuffle = () => {\r\n    fetch(this.apiUrl + 'deck/' + this.deckId + '/shuffle/')\r\n      .then(response => response.json())\r\n      .then((data) => {\r\n        this.deckId = data.deck_id;\r\n        this.cardsRemaining = data.remaining;\r\n        console.log(data.deck_id);\r\n      }).catch((err) => {\r\n        console.log('Request failed', err);\r\n      });\r\n  }\r\n\r\n  this.drawCard = (drawNo) => {\r\n    fetch(this.apiUrl + 'deck/' + this.deckId + '/draw/?count=' + drawNo)\r\n      .then(response => response.json())\r\n      .then((data) => {\r\n        this.lastDrawnCard = data.cards[0].code;;\r\n      }).catch((err) => {\r\n        console.log('Request failed', err);\r\n      });\r\n  }\r\n}\r\n\r\nexport class BlackjackDeckES6Class {\r\n  constructor(apiUrl) {\r\n    this.deckId = 'new';\r\n    this.cardsRemaining = null;\r\n    this.lastDrawnCard = null;\r\n    this.apiUrl = apiUrl;\r\n  }\r\n\r\n  shuffle() {\r\n    fetch(this.apiUrl + 'deck/' + this.deckId + '/shuffle/')\r\n      .then(response => response.json())\r\n      .then((data) => {\r\n        this.deckId = data.deck_id;\r\n        this.cardsRemaining = data.remaining;\r\n        console.log(data.deck_id);\r\n      }).catch((err) => {\r\n        console.log('Request failed', err);\r\n      });\r\n  }\r\n\r\n  drawCard() {\r\n\r\n  }\r\n}\r\n","import BlackjackDeck, { BlackjackDeckES6Class } from './BlackjackDeck.js';\r\n\r\n// // TODO:\r\n/*\r\nInitiate npm (npm init)\r\nAdd Parcel\r\nUse a ES6 CLass for BlackjackDeck\r\nnpm start -> parcel index.html\r\n*/\r\n\r\nlet apiUrl = 'https://deckofcardsapi.com/api/';\r\n\r\nlet deck = new BlackjackDeckES6Class(apiUrl);\r\n\r\nlet status = (response) => {\r\n  if (response.status <= 200 && response.status < 300) {\r\n    return Promise.resolve(response);\r\n  } else {\r\n    return Promise.reject(new Error(response.statusText));\r\n  }\r\n}\r\n\r\nlet json = (response) => {\r\n  return response.json();\r\n}\r\n\r\ndeck.shuffle();\r\n"]}